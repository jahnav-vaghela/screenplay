{"version":3,"sources":["screenplay.bk.js"],"names":[],"mappingsfile":"../screenplay.bk.js","sourcesContent":["/* global define */\n\n(function (context, factory) {\n    'use strict';\n\n    if (typeof module !== 'undefined' && module.exports) {\n        module.exports = factory();\n    } else if (typeof define === 'function' && define.amd) {\n        define([], factory);\n    } else {\n        context.Screenplay = factory();\n    }\n})(this, function () {\n    'use strict';\n\n    var Screenplay = function Screenplay(settings) {\n        if (!(this instanceof Screenplay)) {\n            return new Screenplay(settings);\n        }\n\n        this.steps = [];\n        this.indexes = [];\n        this.markers = {};\n        this.index = 0;\n        this.loops = 1;\n        this.playing = false;\n        this.animationEnd = getEndEventName('animation');\n        this.transitionEnd = getEndEventName('transition');\n        this.events = {\n            'step': [],\n            'play': [],\n            'pause': [],\n            'stop': [],\n            'loop': [],\n            'before': [],\n            'after': []\n        };\n        this.timer = null;\n        this.finale = function () {};\n\n        return this;\n    };\n\n    Screenplay.prototype = {\n        play: function play(loops) {\n            this.loops = loops ? loops : this.loops;\n            this.playing = true;\n            this.run();\n\n            return this.trigger('play');\n        },\n\n        pause: function pause() {\n            this.playing = false;\n            this.run();\n\n            return this.trigger('pause');\n        },\n\n        toggle: function toggle() {\n            return this.playing ? this.pause() : this.play();\n        },\n\n        stop: function stop() {\n            this.loops = 1;\n            this.playing = false;\n            this.finale.call(this);\n\n            return this.trigger('stop');\n        },\n\n        step: function step(fn, repeat) {\n            repeat = repeat || 1;\n\n            for (var i = 0; i < repeat; i++) {\n                this.steps.push(fn);\n                this.indexes.push(this.steps.length - 1);\n            }\n\n            return this;\n        },\n\n        wait: function wait(time) {\n            this.steps.push(function (next) {\n                clearTimeout(this.timer);\n\n                this.timer = setTimeout(function () {\n                    next();\n                }, time);\n            });\n\n            return this;\n        },\n\n        repeat: function repeat(_repeat) {\n            var last = this.steps[this.steps.length - 1];\n\n            return this.step(last, _repeat);\n        },\n\n        end: function end(fn) {\n            this.finale = fn;\n\n            return this;\n        },\n\n        rewind: function rewind() {\n            this.index = 0;\n            this.playing = true;\n            this.run();\n\n            return this;\n        },\n\n        marker: function marker(_marker) {\n            this.markers[_marker.toString()] = this.steps.length;\n\n            return this;\n        },\n\n        goto: function goto(marker) {\n            if (typeof marker === 'string') {\n                if (this.markers[marker]) {\n                    this.index = this.markers[marker];\n                    this.run();\n                }\n            }\n\n            if (typeof marker === 'number') {\n                if (this.indexes[marker]) {\n                    this.index = this.indexes[marker];\n                    this.run();\n                }\n            }\n\n            return this;\n        },\n\n        on: function on(key, fn) {\n            this.events[key].push(fn);\n\n            return this;\n        },\n\n        off: function off(key, fn) {\n            if (fn) {\n                this.events[key] = this.events[key].filter(function (f) {\n                    return f !== fn;\n                });\n            } else {\n                this.events[key] = [];\n            }\n\n            return this;\n        },\n\n        trigger: function trigger(key) {\n            var self = this;\n\n            this.events[key].forEach(function (fn) {\n                fn.call(self);\n            });\n\n            return this;\n        },\n\n        loop: function loop(loops) {\n            this.loops = loops !== undefined ? loops : -1;\n\n            return this;\n        },\n\n        previous: function previous(nb) {\n            var index = this._reverseIndex(this.index - (nb || 1), true);\n\n            if (index) {\n                this.index = index;\n                this.run();\n            }\n\n            return this;\n        },\n\n        next: function next(nb) {\n            var index = this._reverseIndex(this.index + (nb || 1));\n\n            if (index) {\n                this.index = index;\n                this.run();\n            }\n\n            return this;\n        },\n\n        same: function same() {\n            this.index -= 1;\n            this.run();\n\n            return this;\n        },\n\n        run: function run() {\n            var step;\n\n            if (!this.playing) {\n                return;\n            }\n\n            if (this.index < 0) {\n                this.index = 0;\n            }\n\n            if (this.index >= this.steps.length) {\n                this.index = 0;\n\n                if (this.loops !== -1) {\n                    this.loops--;\n                }\n\n                if (this.loops === 0) {\n                    return this.stop();\n                }\n            }\n\n            this.trigger('before');\n\n            step = this.steps[this.index];\n\n            if (typeof step === 'function') {\n                this.concurrentSteps = 1;\n\n                step.call(this, this._next.bind(this));\n            }\n\n            if (Array.isArray(step)) {\n                var steps = step;\n\n                this.concurrentSteps = steps.length;\n\n                steps.forEach(function (step) {\n                    step.call(this, this._next.bind(this));\n                });\n            }\n\n            return this;\n        },\n\n        _next: function _next(doms) {\n            var self = this,\n                domCount = 0;\n\n            var done = function done() {\n                self.concurrentSteps--;\n\n                if (self.concurrentSteps === 0) {\n                    console.log('next');\n                    self.index++;\n                    self.run();\n                    self.trigger('after');\n                }\n            };\n\n            if (doms) {\n                doms = Array.isArray(doms) ? doms : [doms];\n\n                doms.forEach(function (dom) {\n                    var callback = function callback() {\n                        dom.removeEventListener(self.animationEnd, callback);\n                        dom.removeEventListener(self.transitionEnd, callback);\n\n                        if (domCount++ === doms.length - 1) {\n                            done();\n                        }\n                    };\n\n                    dom.addEventListener(self.transitionEnd, callback, false);\n                    dom.addEventListener(self.animationEnd, callback, false);\n                });\n            } else {\n                done();\n            }\n\n            return this;\n        },\n\n        _reverseIndex: function _reverseIndex(index, previous) {\n            var buffer;\n\n            for (var i = 0; i < this.indexes.length; i++) {\n                if (previous && this.indexes[i] >= index || !previous && this.indexes[i] > index) {\n                    return buffer;\n                }\n\n                buffer = this.indexes[i];\n            }\n\n            return 0;\n        }\n    };\n\n    function getEndEventName(key) {\n        var div,\n            map = {\n            animation: {\n                'animation': 'animationend',\n                '-o-animation': 'oAnimationEnd',\n                '-moz-animation': 'animationend',\n                '-webkit-animation': 'webkitAnimationEnd'\n            },\n            transition: {\n                'transition': 'transitionend',\n                '-o-transition': 'oTransitionEnd',\n                '-moz-transition': 'transitionend',\n                '-webkit-transition': 'webkitTransitionEnd'\n            }\n        };\n\n        try {\n            div = document.createElement('div');\n        } catch (e) {\n            return null;\n        }\n\n        for (var eventName in map[key]) {\n            if (typeof div.style[eventName] !== 'undefined') {\n                return map[key][eventName];\n            }\n        }\n\n        return null;\n    }\n\n    return Screenplay;\n});"]}