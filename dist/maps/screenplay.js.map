{"version":3,"sources":["screenplay.js"],"names":[],"mappingsfile":"../screenplay.js","sourcesContent":["var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/* global define */\n\n(function (context, factory) {\n    'use strict';\n\n    if (typeof module !== 'undefined' && module.exports) {\n        module.exports = factory();\n    } else if (typeof define === 'function' && define.amd) {\n        define([], factory);\n    } else {\n        context.Screenplay = factory();\n    }\n})(this, function () {\n    'use strict';\n\n    var Screenplay = function () {\n        function Screenplay(settings) {\n            _classCallCheck(this, Screenplay);\n\n            settings = _extends({}, {\n                async: true\n            }, settings);\n\n            this.async = settings.async;\n            this.steps = [];\n            this.indexes = [];\n            this.markers = {};\n            this.index = 0;\n            this.loops = 1;\n            this.playing = false;\n            this.animationEnd = getEndEventName('animation');\n            this.transitionEnd = getEndEventName('transition');\n            this.events = {\n                'step': [],\n                'play': [],\n                'pause': [],\n                'stop': [],\n                'loop': [],\n                'before': [],\n                'after': []\n            };\n            this.timer = null;\n            this.finale = function () {};\n        }\n\n        _createClass(Screenplay, [{\n            key: 'play',\n            value: function play(loops) {\n                this.loops = loops ? loops : this.loops;\n                this.playing = true;\n                this.run();\n\n                return this.trigger('play');\n            }\n        }, {\n            key: 'pause',\n            value: function pause() {\n                this.playing = false;\n                this.run();\n\n                return this.trigger('pause');\n            }\n        }, {\n            key: 'toggle',\n            value: function toggle() {\n                return this.playing ? this.pause() : this.play();\n            }\n        }, {\n            key: 'stop',\n            value: function stop() {\n                this.loops = 1;\n                this.playing = false;\n                this.finale.call(this);\n\n                return this.trigger('stop');\n            }\n        }, {\n            key: 'step',\n            value: function step(fn, repeat) {\n                repeat = repeat || 1;\n\n                for (var i = 0; i < repeat; i++) {\n                    this.steps.push(fn);\n                    this.indexes.push(this.steps.length - 1);\n                }\n\n                return this;\n            }\n        }, {\n            key: 'wait',\n            value: function wait(time) {\n                this.steps.push(function (next) {\n                    clearTimeout(this.timer);\n\n                    this.timer = setTimeout(function () {\n                        next();\n                    }, time);\n                });\n\n                return this;\n            }\n        }, {\n            key: 'repeat',\n            value: function repeat(_repeat) {\n                var last = this.steps[this.steps.length - 1];\n\n                return this.step(last, _repeat);\n            }\n        }, {\n            key: 'end',\n            value: function end(fn) {\n                this.finale = fn;\n\n                return this;\n            }\n        }, {\n            key: 'rewind',\n            value: function rewind() {\n                this.index = 0;\n                this.playing = true;\n                this.run();\n\n                return this;\n            }\n        }, {\n            key: 'marker',\n            value: function marker(_marker) {\n                this.markers[_marker.toString()] = this.steps.length;\n\n                return this;\n            }\n        }, {\n            key: 'goto',\n            value: function goto(marker) {\n                if (typeof marker === 'string') {\n                    if (this.markers[marker]) {\n                        this.index = this.markers[marker];\n                        this.run();\n                    }\n                }\n\n                if (typeof marker === 'number') {\n                    if (this.indexes[marker]) {\n                        this.index = this.indexes[marker];\n                        this.run();\n                    }\n                }\n\n                return this;\n            }\n        }, {\n            key: 'on',\n            value: function on(key, fn) {\n                this.events[key].push(fn);\n\n                return this;\n            }\n        }, {\n            key: 'off',\n            value: function off(key, fn) {\n                if (fn) {\n                    this.events[key] = this.events[key].filter(function (f) {\n                        return f !== fn;\n                    });\n                } else {\n                    this.events[key] = [];\n                }\n\n                return this;\n            }\n        }, {\n            key: 'trigger',\n            value: function trigger(key) {\n                var _this = this;\n\n                this.events[key].forEach(function (fn) {\n                    fn.call(_this);\n                });\n\n                return this;\n            }\n        }, {\n            key: 'loop',\n            value: function loop(loops) {\n                this.loops = loops !== undefined ? loops : -1;\n\n                return this;\n            }\n        }, {\n            key: 'previous',\n            value: function previous(nb) {\n                var index = this._reverseIndex(this.index - (nb || 1), true);\n\n                if (index) {\n                    this.index = index;\n                    this.run();\n                }\n\n                return this;\n            }\n        }, {\n            key: 'next',\n            value: function next(nb) {\n                var index = this._reverseIndex(this.index + (nb || 1));\n\n                if (index) {\n                    this.index = index;\n                    this.run();\n                }\n\n                return this;\n            }\n        }, {\n            key: 'same',\n            value: function same() {\n                this.index -= 1;\n                this.run();\n\n                return this;\n            }\n        }, {\n            key: 'run',\n            value: function run() {\n                var _this2 = this;\n\n                if (!this.playing) {\n                    return;\n                }\n\n                if (this.index < 0) {\n                    this.index = 0;\n                }\n\n                if (this.index >= this.steps.length) {\n                    this.index = 0;\n\n                    if (this.loops !== -1) {\n                        this.loops--;\n                    }\n\n                    if (this.loops === 0) {\n                        return this.stop();\n                    }\n                }\n\n                var go = function go() {\n                    var step = _this2.steps[_this2.index],\n                        steps = step;\n\n                    if (typeof step === 'function') {\n                        _this2.concurrentSteps = 1;\n\n                        step.call(_this2, _this2._next.bind(_this2));\n                    }\n\n                    if (Array.isArray(steps)) {\n                        _this2.concurrentSteps = steps.length;\n\n                        steps.forEach(function (step) {\n                            step.call(_this2, _this2._next.bind(_this2));\n                        });\n                    }\n                };\n\n                this.trigger('before');\n\n                if (this.async) {\n                    setTimeout(go);\n                } else {\n                    go();\n                }\n\n                return this;\n            }\n        }, {\n            key: '_next',\n            value: function _next(doms) {\n                var _this3 = this;\n\n                var domCount = 0;\n\n                var done = function done() {\n                    if (--_this3.concurrentSteps === 0) {\n                        _this3.index++;\n                        _this3.run();\n                        _this3.trigger('after');\n                    }\n                };\n\n                if (doms) {\n                    doms = Array.isArray(doms) ? doms : [doms];\n\n                    doms.forEach(function (dom) {\n                        var callback = function callback() {\n                            dom.removeEventListener(_this3.animationEnd, callback);\n                            dom.removeEventListener(_this3.transitionEnd, callback);\n\n                            if (++domCount === doms.length) {\n                                done();\n                            }\n                        };\n\n                        dom.addEventListener(_this3.transitionEnd, callback, false);\n                        dom.addEventListener(_this3.animationEnd, callback, false);\n                    });\n                } else {\n                    done();\n                }\n\n                return this;\n            }\n        }, {\n            key: '_reverseIndex',\n            value: function _reverseIndex(index, previous) {\n                var buffer = void 0;\n\n                for (var i = 0; i < this.indexes.length; i++) {\n                    if (previous && this.indexes[i] >= index || !previous && this.indexes[i] > index) {\n                        return buffer;\n                    }\n\n                    buffer = this.indexes[i];\n                }\n\n                return 0;\n            }\n        }]);\n\n        return Screenplay;\n    }();\n\n    function getEndEventName(key) {\n        var map = {\n            animation: {\n                'animation': 'animationend',\n                '-o-animation': 'oAnimationEnd',\n                '-moz-animation': 'animationend',\n                '-webkit-animation': 'webkitAnimationEnd'\n            },\n            transition: {\n                'transition': 'transitionend',\n                '-o-transition': 'oTransitionEnd',\n                '-moz-transition': 'transitionend',\n                '-webkit-transition': 'webkitTransitionEnd'\n            }\n        };\n\n        try {\n            var div = document.createElement('div');\n\n            for (var eventName in map[key]) {\n                if (typeof div.style[eventName] !== 'undefined') {\n                    return map[key][eventName];\n                }\n            }\n        } catch (e) {\n            return null;\n        }\n    }\n\n    return Screenplay;\n});"]}